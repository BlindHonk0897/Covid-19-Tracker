{"version":3,"sources":["components/InfoBox/InfoBox.js","util.js","components/Map/Map.js","components/Table/Table.js","components/LineGraph/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","drawCircleOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettier","stat","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","useStyles","makeStyles","option","fontSize","marginRight","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","classes","name","iso2","sortedData","unshift","getCountriesData","onCountryChange","e","countryCode","Autocomplete","id","width","autoHighlight","getOptionLabel","renderOption","Fragment","defaultValue","renderInput","params","TextField","variant","inputProps","autoComplete","onChange","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0b8fbad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox_cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\">{total} Total</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const drawCircleOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettier = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { drawCircleOnMap } from \"../../util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom, ...props }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {drawCircleOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst caseTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor:\r\n                  casesType === \"recovered\" ? \"#7dd71d\" : \"rgba(204,16,52,0.5)\",\r\n                borderColor: casesType === \"recovered\" ? \"#1CCD08\" : \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox/InfoBox\";\nimport Map from \"./components/Map/Map\";\nimport Table from \"./components/Table/Table\";\nimport \"./App.css\";\nimport { sortData, prettier } from \"./util\";\nimport LineGraph from \"./components/LineGraph/LineGraph\";\nimport numeral from \"numeral\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst useStyles = makeStyles({\n  option: {\n    fontSize: 15,\n    \"& > span\": {\n      marginRight: 10,\n      fontSize: 18,\n    },\n  },\n});\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          countries.unshift({ name: \"Worldwide\", value: \"worldwide\" });\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n  const onCountryChange = async (e, data) => {\n    const countryCode = data == null ? \"worldwide\" : data.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        try {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        } catch (e) {\n          setMapCenter({ lat: 34.80746, lng: -40.4796 });\n        }\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          {/* <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl> */}\n\n          {/* <CountrySelect countries={countries}></CountrySelect> */}\n          <Autocomplete\n            id=\"country-select-demo\"\n            style={{ width: 300 }}\n            options={countries}\n            classes={{\n              option: classes.option,\n            }}\n            autoHighlight\n            getOptionLabel={(option) => option.name}\n            renderOption={(option) => (\n              <React.Fragment>\n                <span>{}</span>\n                {option.name} ({option.value})\n              </React.Fragment>\n            )}\n            defaultValue={{ name: \"Worldwide\", value: \"worldwide\" }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Choose a country\"\n                variant=\"outlined\"\n                className=\"Input\"\n                inputProps={{\n                  ...params.inputProps,\n                  autoComplete: \"new-password\", // disable autocomplete and autofill\n                }}\n              />\n            )}\n            onChange={onCountryChange}\n          />\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettier(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettier(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettier(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3 className=\"app__tableTitle\">Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}